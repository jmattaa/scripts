#!/usr/bin/env bash

# will create the files and folders needed for a (new p)roject
# and therfore newp

projtypes=("c" "go" "py")

SCRIPT_DIR=$(dirname "$(realpath $0)")

projname="$1"
projtype="$2"
build_sys="$3"
build_sys=$(echo "$build_sys" | tr '[:upper:]' '[:lower:]')

if [ -z "$projname" ]; then printf "\033[0;31mnewp\033[0m: man give me a name\n"; exit 1; fi
if [ -d "$projname" ]; then
    printf "\033[0;31mnewp\033[0m: '$projname' already exists pick another name, man\n"
    exit 1
fi
if [ -z "$projtype" ]; then
    select projtype in "${projtypes[@]}"; do
        break
    done
fi
if [[ ! " ${projtypes[*]} " =~ " $projtype " ]]; then
    printf "\033[0;31mnewp\033[0m: '$projtype' is not a valid project type\n"
    exit 1
fi


mkdir "$projname" && cd "$projname"
git init
touch .gitignore README.md
echo "# $projname" >> README.md

setup_c() {
    mkdir src include

    case "$build_sys" in 
        "cmake")       file="CMakeLists.txt" ;;
        "make")        file="Makefile" ;;
        "quickbuild"|"qb") file="quickbuild" ;;
        *)
            printf "\033[0;33mcreating project without a build system!\033[0m\n"
            file=""
            ;;
    esac

    if [ -n "$file" ]; then
        cp "$SCRIPT_DIR/newpfiles/$file" "$file"

        # this is so it works on mac and linux
        tmpfile=$(mktemp)
        sed "s/__NEWP_PROJNAME__/$projname/g" "$file" > "$tmpfile" && \
            mv "$tmpfile" "$file"
    fi

    touch src/main.c
    cat <<EOF >> src/main.c
#include <stdio.h>

int main(int argc, char **argv) 
{
    printf("Hello, World!\n");
    return 0;
}
EOF
    
    cat <<EOF >> .gitignore
build/
.cache
compile_commands.json
EOF
}

setup_go() {
    touch main.go
    go mod init github.com/jmattaa/"$projname"

    cat<<EOF >> main.go 
package main

func main() {
    println("Hello, World!")
}
EOF

    # cuz that be the name of the exec being build
    echo "$projname" >> .gitignore

    printf "building $projname with \033[0;35mgo build...\033[0m\n"

    go build
}

setup_py() {
    touch main.py

    cat <<EOF >> main.py
if __name__ == "__main__":
    print("Hello, World!")
EOF
}

"setup_$projtype" || {
    echo "newp: '$projtype' is not a valid project type"
    exit 1
}
printf "\033[0;32mproject $projname created!\033[0m\n"
